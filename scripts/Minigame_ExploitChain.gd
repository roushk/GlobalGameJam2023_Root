extends NinePatchRect


# Declare member variables here. Examples:
# var a = 2
# var b = "text"
var rng = RandomNumberGenerator.new()
var dragDropLocations = []
var blocks = []
var answers = []
var text = []
var numActive = 0;
var notSolved = true;
var solutionText;
var solutions = [
	"Delta",
	"Omega",
	"Phi",
	"Pi",
	"Psi",
	"Sigma",
	"Gamma",
	"Lambda"
]
var solutionTexts = [
	"PSST. I overheard someone mention: ",
	"Look what I found written on this notepad: ",
	"Google says:  ",
	"I was asking ChatGPT what my password was, it said it was: ",
	"Password = :",
	"Mom always used to say: ",
	"Elite Hacker says what? I mean: ",
	"I have a hint that the solution is: "
]

# Called when the node enters the scene tree for the first time.
func _ready():
	dragDropLocations.append(get_node("DragDropLocation1"));
	dragDropLocations.append(get_node("DragDropLocation2"));
	dragDropLocations.append(get_node("DragDropLocation3"));
	dragDropLocations.append(get_node("DragDropLocation4"));
	dragDropLocations.append(get_node("DragDropLocation5"));
	dragDropLocations.append(get_node("DragDropLocation6"));
	dragDropLocations.append(get_node("DragDropLocation7"));
	dragDropLocations.append(get_node("DragDropLocation8"));
	dragDropLocations.append(get_node("DragDropLocation9"));
	dragDropLocations.append(get_node("DragDropLocation10"));
	
	blocks.append(get_node("MouseDragBlock1"));
	blocks.append(get_node("MouseDragBlock2"));
	blocks.append(get_node("MouseDragBlock3"));
	blocks.append(get_node("MouseDragBlock4"));
	blocks.append(get_node("MouseDragBlock5"));
	blocks.append(get_node("MouseDragBlock6"));
	blocks.append(get_node("MouseDragBlock7"));
	blocks.append(get_node("MouseDragBlock8"));
	blocks.append(get_node("MouseDragBlock9"));
	blocks.append(get_node("MouseDragBlock10"));
	
	for drop in blocks:
		drop.set_process(false);
		drop.set_physics_process(false)
		drop.visible = false
		answers.append(-1);
		text.append("NONE");
	
	for loc in dragDropLocations:
		loc.set_process(false);
		loc.set_physics_process(false)
		loc.visible = false
		loc.get_tree().paused = true;
	rng.randomize()
	
	setup_level(2)


func get_funny_char(number):
	var character = ord('0')
	if(number >= 0 && number < 10):
		character += number;
	else:
		character = ord('A')
		number -= 10;
		character += number
	return char(character)
	
func setup_level(numDrops):
	numActive = numDrops
	notSolved = true;
	var num = 0
	for drop in dragDropLocations:
		if(num < numActive):
			drop.set_process(true)
			drop.visible = true;
			drop.set_physics_process(true)
			drop.get_tree().paused = false;
			answers[num] = rng.randi_range(0, 7)	#assign random solution val
		num += 1

	num = 0
	#TODO Generate password for command
	
	var randVal = rng.randi_range(0, 7)
	
	for block in blocks:
		if(num < numActive):
			block.set_process(true)
			block.visible = true;
			block.set_physics_process(true)
			block.set_frame(answers[num])
			block.position = Vector2(rng.randi_range(63,176), rng.randi_range(73,112));
		num += 1
		
	solutionText = solutionTexts[rng.randi_range(0, solutionTexts.size() - 1)];
	for answer in answers:
		if answer != -1:
			solutionText += " " + solutions[answer] + " "
	$"Solution".text = solutionText;
	notSolved = true;
		
func check_values():
	var num = 0
	var numCorrect = 0
	if(get_node("/root/AutoloadMouseGrabbing").is_grabbing() == true):
		return false;

	for drop in dragDropLocations:	# For each drop location
		if(num < numActive):		# If active location
			if(drop.get_node("Area2D").get_overlapping_areas().size() <= 0):
				return false	#Missing a node
			for ar in drop.get_node("Area2D").get_overlapping_areas():	 # Get overlapping values
				if(ar.get_name().left(14) == "MouseDragBlock"):	# If is drag block type
					var value = ar.get_value()
					if(answers[num] == value):						# If answer is wrong
						numCorrect += 1										# Incorrect
						continue
		num += 1
	if(numCorrect == numActive):
		return true
	return false
			
# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	if(check_values() == true && notSolved):
		notSolved = false
		$"../FinalCommand".visible = true
		var solutionString = "echain -a"
		for answer in answers:
			if answer != -1:
				solutionString += str(get_funny_char(rng.randi_range(0,15)));
		solutionString += " --force -o resolver.ech"
		$"../Terminal/LineEdit"._set_password(solutionString)
		print(solutionString)
			
	#Display Password
	pass
